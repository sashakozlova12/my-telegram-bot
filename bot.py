from dotenv import load_dotenv
import os
load_dotenv()

import asyncio
import re
import google.generativeai as genai
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ os.environ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω)
import os

TOKEN_API = os.getenv("TOKEN_API")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # API –∫–ª—é—á —Ç–æ–∂–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

MODEL_NAME = "gemini-2.0-flash"

# üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
HELP_COMMAND = """
<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é!</b>
/hi - –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π
/help - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥
/ask &lt;—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å&gt; - –∑–∞–¥–∞–π  –º–Ω–µ –≤–æ–ø—Ä–æ—Å 
"""

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML parse_mode
bot = Bot(token=TOKEN_API, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML –¥–ª—è Telegram
def convert_markdown_to_html(markdown_text: str) -> str:
    html_text = markdown_text
    html_text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", html_text)    # –∂–∏—Ä–Ω—ã–π
    html_text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", html_text)        # *–∫—É—Ä—Å–∏–≤*
    html_text = re.sub(r"\n[-*] (.*?)", r"\n‚Ä¢ \1", html_text)        # —Å–ø–∏—Å–∫–∏
    return html_text

# üí¨ –ó–∞–ø—Ä–æ—Å –∫ Google Gemini (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
async def query_llm(user_message: str) -> str:
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        # generate_content —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ:
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, model.generate_content, user_message)
        if hasattr(response, "text"):
            return convert_markdown_to_html(response.text.strip())
        else:
            return "–ì–µ–Ω—Ä–∏—Ö –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}"

# –ö–æ–º–∞–Ω–¥–∞ /hi ‚Äî  –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è
@dp.message(Command("hi"))
async def start_command(message: Message):
    await message.answer(
        "<em>–ü—Ä–∏–≤–µ—Ç!, —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –≤–µ—Å—ë–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!</em>\n"
        "–ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
    )

# –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–º–æ–≥–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(HELP_COMMAND)

# –ö–æ–º–∞–Ω–¥–∞ /—Å–ø—Ä–æ—Å–∏ ‚Äî –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ò–ò
@dp.message(Command("ask"))
async def ask_command(message: Message):
    user_input = message.text.removeprefix("/ask").strip()
    if not user_input:
        await message.answer(" –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    response = await query_llm(user_input)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())